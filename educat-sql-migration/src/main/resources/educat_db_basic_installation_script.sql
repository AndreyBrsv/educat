-- Основной скрипт развертывания базы


-- *** ОБЩИЕ НАСТРОЙКИ БАЗЫ ***


-- *** СХЕМА ***


-- *** ТАБЛИЦЫ ***
-- *БЕЗОПАСТНОСТЬ*
CREATE TABLE EC_SECURITIES
(
    SECURITY_ID SERIAL PRIMARY KEY,
    SECURITY_NAME VARCHAR(50) NOT NULL,
    SECURITY_VALUE VARCHAR NOT NULL,
    DESCRIPTION VARCHAR(300) DEFAULT NULL
);
CREATE UNIQUE INDEX UI_EC_SECURITIES_SECURITY_NAME ON EC_SECURITIES (SECURITY_NAME);
COMMENT ON TABLE EC_SECURITIES IS 'Таблица, содержащая данные, связанные с безопастностью';
COMMENT ON COLUMN EC_SECURITIES.SECURITY_NAME IS 'Название';
COMMENT ON COLUMN EC_SECURITIES.SECURITY_NAME IS 'Значение';
COMMENT ON COLUMN EC_SECURITIES.SECURITY_NAME IS 'Описание';
-- *ПОЛЬЗОВАТЕЛИ*
-- Пользователи
CREATE TABLE EC_USERS
(
    USER_ID           SERIAL PRIMARY KEY,
    USER_ROLE_ID      INTEGER     NOT NULL,
    EMAIL             VARCHAR(50) NOT NULL,
    EMAIL_CONFIRMED   BOOLEAN     NOT NULL     DEFAULT FALSE,
    PASSWORD          VARCHAR(50) NOT NULL,
    FIRST_NAME        VARCHAR(50) NOT NULL,
    SECOND_NAME       VARCHAR(50) NOT NULL,
    MIDDLE_NAME       VARCHAR(50)              DEFAULT NULL,
    STATUS            VARCHAR(50)              DEFAULT 'ACTIVE',
    REGISTRATION_DATE TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp
);
CREATE UNIQUE INDEX UI_EC_USERS_EMAIL ON EC_USERS (EMAIL);
COMMENT ON TABLE EC_USERS IS 'Пользователи';
COMMENT ON COLUMN EC_USERS.USER_ID IS 'Уникальный идентификатор пользователя';
COMMENT ON COLUMN EC_USERS.USER_ROLE_ID IS 'Уникальный идентификатор роли';
COMMENT ON COLUMN EC_USERS.EMAIL IS 'Адрес электронной почты пользователя';
COMMENT ON COLUMN EC_USERS.EMAIL_CONFIRMED IS 'Признак подтвержденности адреса электронной почты пользователя';
COMMENT ON COLUMN EC_USERS.PASSWORD IS 'Пароль пользователя';
COMMENT ON COLUMN EC_USERS.FIRST_NAME IS 'Имя пользователя';
COMMENT ON COLUMN EC_USERS.SECOND_NAME IS 'Фамилия пользователя';
COMMENT ON COLUMN EC_USERS.MIDDLE_NAME IS 'Отчество пользователя(при наличии)';
COMMENT ON COLUMN EC_USERS.STATUS IS 'Статус пользователя';
-- Таблица, содержащая дополнительную информацию о пользователях
CREATE TABLE EC_ADDITIONAL_USER_REFERENCES
(
    ADDITIONAL_USER_REFERENCE_ID SERIAL PRIMARY KEY,
    USER_ID                      INTEGER,
    AVATAR_LINK                  VARCHAR(300),
    VK_LINK                      VARCHAR(50),
    FB_LINK                      VARCHAR(50),
    INSTA_LINK                   VARCHAR(50),
    INFO                         VARCHAR(180)
);
-- Перечень ролей, имеющихся в системе
CREATE TABLE EC_USER_ROLES
(
    USER_ROLE_ID     SERIAL PRIMARY KEY,
    ROLE_NAME        VARCHAR(50) NOT NULL UNIQUE,
    ROLE_DESCRIPTION VARCHAR(50) NOT NULL
);
COMMENT ON TABLE EC_USER_ROLES IS 'Роли пользователей';
COMMENT ON COLUMN EC_USER_ROLES.USER_ROLE_ID IS 'Уникальный идентификатор роли пользователя';
COMMENT ON COLUMN EC_USER_ROLES.ROLE_NAME IS 'Название роли';
COMMENT ON COLUMN EC_USER_ROLES.ROLE_DESCRIPTION IS 'Описание роли';
-- Перечень прав доступа
CREATE TABLE EC_USER_PERMISSIONS
(
    USER_PERMISSION_ID SERIAL PRIMARY KEY,
    PERMISSION         VARCHAR(50) NOT NULL UNIQUE,
    DESCRIPTION        VARCHAR(50) NOT NULL
);
COMMENT ON TABLE EC_USER_PERMISSIONS IS 'Права доступа пользователей';
COMMENT ON COLUMN EC_USER_PERMISSIONS.USER_PERMISSION_ID IS 'Уникальный идентификатор права доступа';
COMMENT ON COLUMN EC_USER_PERMISSIONS.PERMISSION IS 'Название права доступа';
COMMENT ON COLUMN EC_USER_PERMISSIONS.DESCRIPTION IS 'Описание права доступа';
-- Таблица, обеспечивающая связь многие ко многим между ролями и правами доступа
CREATE TABLE EC_ROLE_PERMISSION_REFERENCES
(
    USER_ROLE_ID       INTEGER NOT NULL,
    USER_PERMISSION_ID INTEGER NOT NULL,
    PRIMARY KEY (USER_ROLE_ID, USER_PERMISSION_ID)
);
COMMENT ON TABLE EC_ROLE_PERMISSION_REFERENCES IS 'Таблица связей между ролями и правами доступа';
COMMENT ON COLUMN EC_ROLE_PERMISSION_REFERENCES.USER_ROLE_ID IS 'Уникальный идентификатор роли';
COMMENT ON COLUMN EC_ROLE_PERMISSION_REFERENCES.USER_PERMISSION_ID IS 'Уникальный идентификатор права доступа';
-- Подписки между пользователями
CREATE TABLE EC_USER_TO_USER_SUBSCRIPTIONS
(
    SUBSCRIBE_USER_ID  INTEGER NOT NULL,
    SUBSCRIBED_USER_ID INTEGER NOT NULL,
    PRIMARY KEY (SUBSCRIBE_USER_ID, SUBSCRIBED_USER_ID)
);
COMMENT ON TABLE EC_USER_TO_USER_SUBSCRIPTIONS IS 'Таблица подписок пользователей друг на друга';
COMMENT ON COLUMN EC_USER_TO_USER_SUBSCRIPTIONS.SUBSCRIBE_USER_ID IS 'Пользователь, на которого подписались';
COMMENT ON COLUMN EC_USER_TO_USER_SUBSCRIPTIONS.SUBSCRIBED_USER_ID IS 'Пользователь, который подписался';
-- Процедура и триггер, исключающие ситуацию, когда пользователь может быть подписан сам на себя
-- Чтобы никто ненароком не сломал базу и бизнес логику. Аналогичные проверки нужно включить
-- на сервере.
CREATE FUNCTION CHECK_SUBSCRIBERS_ID() RETURNS TRIGGER AS
$EC_TRG_ADD_NEW_SUBSCRIBER_BI$
BEGIN
    IF NEW.SUBSCRIBE_USER_ID = NEW.SUBSCRIBED_USER_ID THEN
        RAISE EXCEPTION $$SUBSCRIBE_USER_ID and SUBSCRIBED_USER_ID can't be equal$$;
    END IF;
    RETURN NEW;
END;
$EC_TRG_ADD_NEW_SUBSCRIBER_BI$ LANGUAGE plpgsql;

CREATE TRIGGER TRG_EC_USER_TO_USER_SUBSCRIPTIONS_CHECK_USER_IDS_BI
    BEFORE INSERT OR UPDATE
    ON EC_USER_TO_USER_SUBSCRIPTIONS
    FOR EACH ROW
EXECUTE PROCEDURE CHECK_SUBSCRIBERS_ID();

-- Ограничения
ALTER TABLE EC_USERS
    ADD CONSTRAINT EC_USERS_2_USER_ROLES_FK
        FOREIGN KEY (USER_ROLE_ID) REFERENCES EC_USER_ROLES (USER_ROLE_ID);
ALTER TABLE EC_ROLE_PERMISSION_REFERENCES
    ADD CONSTRAINT EC_ROLE_PERMISSION_REFERENCES_2_USER_ROLES_FK
        FOREIGN KEY (USER_ROLE_ID) REFERENCES EC_USER_ROLES (USER_ROLE_ID);
ALTER TABLE EC_ROLE_PERMISSION_REFERENCES
    ADD CONSTRAINT EC_ROLE_PERMISSION_REFERENCES_2_USER_PERMISSIONS_FK
        FOREIGN KEY (USER_ROLE_ID) REFERENCES EC_USER_PERMISSIONS (USER_PERMISSION_ID);
ALTER TABLE EC_ADDITIONAL_USER_REFERENCES
    ADD CONSTRAINT EC_ADDITIONAL_USER_REFERENCES_2_USERS_FK
        FOREIGN KEY (USER_ID) REFERENCES EC_USERS (USER_ID);
ALTER TABLE EC_USER_TO_USER_SUBSCRIPTIONS
    ADD CONSTRAINT EC_USER_TO_USER_SUBSCRIPTIONS_2_USERS_FK1
        FOREIGN KEY ( SUBSCRIBE_USER_ID ) REFERENCES EC_USERS ( USER_ID );
ALTER TABLE EC_USER_TO_USER_SUBSCRIPTIONS
    ADD CONSTRAINT EC_USER_TO_USER_SUBSCRIPTIONS_2_USERS_FK2
        FOREIGN KEY ( SUBSCRIBED_USER_ID ) REFERENCES EC_USERS ( USER_ID );






-- *СТАТЬИ*
-- Статьи
CREATE TABLE EC_ARTICLES
(
    ARTICLE_ID SERIAL PRIMARY KEY,
    USER_ID    INTEGER,
    PICTURE_REFERENCE VARCHAR,
    HEADER     VARCHAR,
    TAGS       JSONB,
    DATE       TIMESTAMP,
    CONTENT    JSONB NOT NULL
);
CREATE TABLE EC_DRAFT_ARTICLES (
    DRAFT_ARTICLE_ID SERIAL PRIMARY KEY,
    OWNER_USER_ID INTEGER NOT NULL,
    LAST_MODERATOR_USER_ID INTEGER,
    LAST_MODIFICATION_DATE TIMESTAMP DEFAULT current_timestamp,
    CONTENT JSONB NOT NULL
);
-- !!! Добавить каскадное удаление статья -> комментарии
-- Комментарии к статьям
CREATE TABLE EC_ARTICLE_COMMENTS
(
    ARTICLE_COMMENT_ID SERIAL PRIMARY KEY,
    ARTICLE_ID         INTEGER NOT NULL,
    USER_ID            INTEGER,
    PARENT_COMMENT_ID  INTEGER,
    CONTENT            VARCHAR,
    DATE               TIMESTAMP
);
-- Закладки, сделанные пользователем
CREATE TABLE EC_USER_BOOKMARKED_ARTICLES
(
    USER_BOOKMARKED_ARTICLE_ID SERIAL PRIMARY KEY,
    USER_ID                    INTEGER NOT NULL,
    ARTICLE_ID                 INTEGER NOT NULL
);








-- Тьюторы(Это такие же пользователи, но обладающие дополнительной информацией
-- о своей профессиональной деятельности)
-- CREATE TABLE EC_TUTORS
-- (
--     TUTOR_ID
-- )

-- *ОБРАЗОВАТЕЛЬНЫЕ КУРСЫ*
-- Образовательные курсы
CREATE TABLE EC_EDUCATIONAL_COURSES (
    EDUCATIONAL_COURSE_ID SERIAL PRIMARY KEY,
    HEADER VARCHAR,
    DESCRIPTION VARCHAR,
    PRICE NUMERIC(19, 2) NOT NULL
);
-- Задачи
CREATE TABLE EC_EDUCATIONAL_TASKS (
    EDUCATIONAL_TASK_ID SERIAL PRIMARY KEY
);
-- Задачи
CREATE TABLE EC_USER_COMPLETE_TASKS (
    USER_COMPLETE_TASK_ID SERIAL PRIMARY KEY,
    USER_ID INTEGER NOT NULL,
    EDUCATIONAL_TASK_ID NUMERIC NOT NULL
);

-- Подписки пользователей на курсы
CREATE TABLE EC_USER_COURSE_SUBSCRIPTIONS (
    USER_COURSE_SUBSCRIPTION_ID SERIAL PRIMARY KEY,
    USER_ID INTEGER NOT NULL,
    EDUCATIONAL_COURSE_ID INTEGER NOT NULL,
    EXPIRATION_DATE TIMESTAMP WITH TIME ZONE NOT NULL
);

-- Всевозможные достижения, получаемые пользователем при
-- выполнении каких-нибудь заданий
CREATE TABLE EC_EDUCATIONAL_ACHIEVEMENTS (
    EDUCATIONAL_ACHIEVEMENT_ID SERIAL PRIMARY KEY,
    USER_ID INTEGER NOT NULL,
    DESCRIPTION VARCHAR
);